-- This file was generated by curlimport.e.
include std/dll.e
include std/machine.e
include std/utils.e

export constant dll = open_dll({
  "libcurl.dll",
  "libcurl.so"
})

--

constant curl_easy_initx = define_c_func(dll, "+curl_easy_init",{}, C_POINTER)
export function init()
	if sequence(library_load_error) then
		return library_load_error
	end if
	return c_func(curl_easy_initx, {})
end function
export constant C_CURLOPTION = C_POINTER
--
constant C_CURLCODE = C_POINTER
export constant curl_easy_setoptx = define_c_func(dll, "+curl_easy_setopt",{C_POINTER, C_CURLOPTION, C_POINTER}, C_CURLCODE)
export function setopt(atom curl, atom option, object ptr)
	if sequence(ptr) then
		ptr = allocate_string( ptr, 1 )
	end if
	return c_func(curl_easy_setoptx, {curl,option, ptr})
end function
--
export constant curl_easy_performx = define_c_func(dll, "+curl_easy_perform", {C_POINTER}, C_CURLCODE)
export function perform(atom curl)
	if curl_easy_performx > 0 then
		return c_func(curl_easy_performx, {curl})
	end if
	return 0
end function
--
export constant curl_easy_cleanupx = define_c_proc(dll, "+curl_easy_cleanup",{C_POINTER})
export procedure cleanup(atom curl)
	c_proc(curl_easy_cleanupx, {curl})
end procedure
export constant C_CURLINFO = C_POINTER
--
export constant curl_easy_getinfox = define_c_func(dll, "+curl_easy_getinfo",{C_POINTER, C_CURLINFO}, C_CURLCODE)
export function curl_easy_getinfo(atom curl, atom info)
	return c_func(curl_easy_getinfox, {curl,info})
end function
--
export constant curl_easy_duphandlex = define_c_func(dll, "+curl_easy_duphandle",{C_POINTER}, C_POINTER)
export function curl_easy_duphandle(atom curl)
	return c_func(curl_easy_duphandlex, {curl})
end function
--
export constant curl_easy_resetx = define_c_proc(dll, "+curl_easy_reset",{C_POINTER})
export procedure curl_easy_reset(atom curl)
	c_proc(curl_easy_resetx, {curl})
end procedure
export constant C_SIZE_T = C_POINTER
--
export constant curl_easy_recvx = define_c_func(dll, "+curl_easy_recv",{C_POINTER, C_POINTER, C_SIZE_T, C_POINTER}, C_CURLCODE)
export function curl_easy_recv(atom curl, atom buffer, atom buflen, atom n)
	return c_func(curl_easy_recvx, {curl,buffer,buflen,n})
end function
--
export constant curl_easy_sendx = define_c_func(dll, "+curl_easy_send",{C_POINTER, C_POINTER, C_SIZE_T, C_POINTER}, C_CURLCODE)
export function curl_easy_send(atom curl, atom buffer, atom buflen, atom n)
	return c_func(curl_easy_sendx, {curl,buffer,buflen,n})
end function
--
export constant curl_easy_upkeepx = define_c_func(dll, "+curl_easy_upkeep",{C_POINTER}, C_CURLCODE)
export function curl_easy_upkeep(atom curl)
	return c_func(curl_easy_upkeepx, {curl})
end function
constant library_load_error = iff(dll = -1, "Failed to load library", iff(curl_easy_initx = -1, "Failed to load curl_easy_init", 0))